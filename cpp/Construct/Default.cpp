#include <iostream>
using namespace std;

/*
- 디폴트 생성자 Default Construct
  - 객체를 만들 때 인수를 제시하지 않고도 객체를 만들 수 있는 생성자
      우리가 클래스에서 생성자를 하나도 만들지 않으면 그 클래스에 생성자가 아예 없는 게 아니라 자동적(묵시적)으로 만들어지는 생성자가 여러가지가 있다.
      이 중에 하나가 디폴트 생성자이다.
      우리가 클래스의 생성자를 아무것도 만들지 않으면 클래스 안에는 자동적으로 아무런 일도 하지 않는 묵시적인 디폴트 생성자가 하나 만들어진다.
  - 매개변수가 없는 생성자 또는 모든 매개변수에 디폴트 인수가 지정된 생성자
  - 클래스를 선언할 때 생성자를 선언하지 않으면 컴파일러는 묵시적으로 디폴트 생성자를 정의한다.
    묵시적 디폴트 생성자는 아무런 처리도 포함하지 않는다.
  - 생성자를 하나라도 선언하면 컴파일러는 묵시적 디폴트 생성자를 정의하지 않는다.
    우리가 만든 생성자만 가지고 객체를 만들 수 있게 된다.
*/

/* 
- 1. 묵시적 형변환 예시
  Counter1 라는 클래스 안에 value 라는 데이터 멤버와 reset(), count(), getValue() 라는 멤버 함수가 있다.
  이 때 Counter() {} 라는 생성자를 선언하지 않아도 컴파일러는 Counter() {} 이런 아무런 일도 하지 않는 생성자를 하나 만든 것처럼 묵시적으로 디폴트 생성자를 하나 만든다.
  여기 Counter() {} 묵시적 생성자에는 괄호 안에 매개 변수가 없다.
  인수를 제시하지 않고 바로 객체를 만들 수 있는 생성자이다.
*/

class Counter {
    int value; // value 데이터 멤버
public:
    // Counter() {} // 생성자
    void reset() { value = 0; } // reset 멤버 함수
    void count() { ++value; } // count 멤버 함수
    int getValue() const { return value; } // getValue 멤버 함수
};

int main() {
    Counter cnt;
    // 묵시적으로 선언된 디폴트 생성자
    // 지금 매개변수가 없기 때문에 객체 이름만 사용한다.
    // 보통 함수의 경우 매개변수가 없다고 하더라도 괄호를 열고 닫는 표시를 하지만, 
    // 객체의 경우 생성자에 아무런 매개변수가 없을 땐 매개변수 없이, 괄호 열고 닫는 것 없이 객체 이름만 넣어 객체를 선언할 수 있게 해준다.
    // ...
    cnt.reset();
    cnt.count();
    cout << cnt.getValue() << endl;
    return 0;
}
