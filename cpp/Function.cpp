#include <iostream>
using namespace std;

/*
- 함수
  - 필요한 작업을 수행하는 프로그램 문장들을 하나의 단위로 모아놓고 이름을 부여한 것이다.
  - 함수에 정의된 처리가 필요한 부분에서 호출하여 사용한다.
  - 매개변수를 통하여 함수에서 처리할 데이터(인수)를 전달한다.
  - 함수는 정해진 처리를 한 후 결과값을 반환할 수 있다.
  - 함수의 실행을 완료하면 호출한 곳으로 복귀한다.
  - C++ 프로그램은 함수를 기본 단위로 하여 구성된다.
  
- 함수 정의 형식
  ReturnType functionName (fParameterList) // 머리부
  { // 몸체 블록
      Type1 LocalVar1; // 지역변수 선언
      Type2 LocalVar2;
      ....
      statement1; // 처리할 작업을 수행하는 문장
      statement2;
      ....
      return returnExpression; // 결과값을 반환함
  }
  fParameterList: 인수를 받기 위한 형식 매개변수 선언
  ReturnType: 함수의 결과로 반환하는 값의 자료형
  returnExpression: 함수의 결과로 반환하는 값


- return
  - 함수를 마치고 함수를 호출하는 곳으로 복귀하는 명령
  - 함수 안의 어떤 곳이든 복귀를 위해 사용할 수 있다.
  - returnExpression 은 함수 머리부에 선언한 ReturnType 과 일치하는 자료형의 수식 또는 묵시적 형변환이 가능한 자료형의 수식을 사용한다.
  - 반환값이 없는 함수의 ReturnType 은 void 로 선언한다.
  - main 함수에서는 return 명령을 만나지 않은 상태로 함수의 끝에 도달하면 return 0; 을 실행한 것과 같다.


- 함수 호출 형식
  1. 호출만 하는 함수. 반환값 유무에 관계없이 사용 가능하다.
     functionName(aParameterList);
  2. ReturnType 이 void 가 아닌 함수에 사용할 수 있는 함수
     varName = functionName(aParameterList);
  aParameterList: 인수로 전달할 실 매개변수 나열


- 함수의 장단점
  - 장점
    1. 의미있는 작업 단위로 모듈화 -> 간결하고 이해하기 쉬운 프로그램을 만들 수 있다.
    2. 반복 사용되는 코드의 중복을 방지한다.
    3. 잘 설계된 함수는 다른 응용에서 재사용할 수 있다.

  - 단점
    1. 함수 호출과 복귀 과정에서 처리 시간이 추가된다
       -> 매우 효율적으로 동작해야하는 함수라면 inline 함수로 선언한다.


- 인수
  - 함수 호출 문장에서 함수에 전달하는 값
  - 매개변수를 통해 인수에 전달한다.
  - 실 매개변수: actual parameter
                 함수 호출 문장에서 함수의 형식 매개변수에 전달할 값
  - 형식 매개변수: formal parameter.
                   인수를 전달받기 위해 함수에 선언된 매개변수
                   함수 헤더에 매개변수의 자료형과 이름을 선언한다. -> 어떤 형태로 값을 전달받아야 하는지 설명해줌


- 인수 전달방식
  1. 값 호출(Call-by-value)
    - 실 매개변수의 값을 형식 매개변수에 복사함(원본은 그대로 있고 사본이 만들어지는 것)
    - 장점: 실 매개변수와 형식 매개변수는 별개의 데이터이므로 불필요한 부작용이 발생하지 않는다.
    - 단점: 구조체와 같이 많은 양의 데이터로 구성된 인수를 전달할 경우 데이터 복사량이 많아진다.
  2. 참조 호출(Call-by-reference)
    - 실 매개변수의 참조를 형식 매개변수에 전달함
    - 함수에서 형식 매개변수의 값을 변경하는 것은 실 매개변수의 값을 변경하는 것과 같다.
    - 형식 매개변수에 복사되는 데이터의 양은 실 매개변수의 크기와 관계없이 일정하다.
      주소를 참조하는 것이기 때문에 일정하다. 32bit 컴퓨터 -> 보통 4byte, 64bit 컴퓨터 -> 보통 8byte 를 전달한다.
      많은 양의 데이터로 구성되는 구조체나 객체를 인수로 전달하는 경우 효율적이다.


- 참조 호출을 통한 효율적인 인수 전달
  - 많은 양의 데이터로 구성되는 구조체나 객체를 인수로 전달하는 경우
    값 호출을 사용하는 것에 비해 참조 호출을 사용하는 것이 효율적이다.
  - 함수 호출의 효율성을 위해 참조 호출을 하지만
    실 매개변수의 값이 변경되는 것을 원하지 않는 형식 매개변수에는 const 를 한정어로 지정하여 실 매개변수를 보호할 수 있다.


- 인수의 기본 값을 지정하는 방법
  - 일반적으로 사용되는 기본 값이 있는 인수의 경우 함수를 정의할 때 그 값을 미리 지정할 수 있다.
    Eg. istream& get(char* pch, int max, char delim='\n');
  - 디폴트 인수는 인수 중 끝에만 위치할 수 있다.
    Eg. void f(int x, int y = 10, int z = 20); // OK
    Eg. void g(int x, int y = 10, int z); // ERROR!

- inline 함수
  - 함수 호출 절차를 따르지 않고 함수 호출 위치에 함수의 처리 문장이 삽입되게 번역하도록 선언된 함수
  - 함수를 사용함으로써 얻을 수 있는 모듈화의 장점을 살리면서 함수 호출에 따른 부수적인 처리시간이 생략됨
  - 함수 호출 루틴으로부터 함수로 넘어가는 부분의 코드 최적화가 가능해짐
    매우 빈번히 호출되며 빠른 실행이 요구되는 함수를 inline 함수로 선언하면 성능을 높이는데 도움이 됨
  - inline 함수로 선언하더라도 반드시 inline 으로 번역되는 것은 아니다.
    - inline 선언을 무시하고 일반 함수로 번역하는 경우
      1. 함수가 너무 큰 경우
      2. 순환 호출(recursive call)을 하는 경우(자기 자신을 부르는 재귀호출)
      3. 프로그램 내에서 그 함수에 대한 포인터를 사용하는 경우
         함수의 포인터를 전달해 그 포인트에 의해 지정된 함수가 선택적으로 동작하도록 하는 함수 = 콜백(callback) 함수
         콜백 함수를 만들 때 함수에 대한 포인터를 전달한다.
         이 때 정확한 함수 실체가 있어야 하기 때문에 일반 함수처럼 번역이 되어있지 않으면 안된다.

*/